#include "arm_controller/inverse_kinematic.hpp"
#include <custom_msg/degrees.h>
#include <std_msgs/Float32.h>
#include <ros/ros.h>

float prev = 0, curr = 0;

void sensorCallback(const std_msgs::Float32::ConstPtr &msg)
{
    prev = curr;
    curr = msg->data;
}

int main(int argc, char **argv)
{
    ros::init(argc, argv, "main");
    ros::NodeHandle n;

    ros::Publisher chatter_pub = n.advertise<custom_msg::degrees>("degree", 1000);

    ros::Rate loop_rate(10);

    int32_t count = 0;
    int32_t current_rotation = -90;

    custom_msg::degrees msgDegree;
    chatter_pub.publish(msgDegree);
    while (count < 3){
        // Predifined base state
        msgDegree.teta0 = current_rotation;
        
        msgDegree.teta1 = 30;
        msgDegree.teta2 = -80;
        msgDegree.teta3 = -55;
        msgDegree.teta4 = 30;
        // Spin until distance change is more than 30 cm
        while (std::abs(prev - curr) >= 30 || curr > 25){
            ros::Subscriber sub = n.subscribe("/sensor_data", 1000, sensorCallback);
            ros::spinOnce();
            loop_rate.sleep();

            if(msgDegree.teta0 + 2 >= 90){
                break;
            }

            msgDegree.teta0 += 2;
        }
        current_rotation = msgDegree.teta0;

        msgDegree.teta1 = inverse_teta1(curr, 5);
        msgDegree.teta2 = inverse_teta2(curr, msgDegree.teta1 , 5);
        msgDegree.teta3 = inverse_teta3(msgDegree.teta1, msgDegree.teta2);

        msgDegree.teta1 *= deg;
        msgDegree.teta2 *= deg * -1;
        msgDegree.teta3 *= deg * -1;

        ROS_INFO("Published angles: Teta0: %.2f, Teta1: %.2f, Teta2: %.2f, Teta3: %.2f, Teta4: %.2f", 
                    msgDegree.teta0, msgDegree.teta1, msgDegree.teta2, msgDegree.teta3, msgDegree.teta4);

        msgDegree.teta0 = -43;

        // Move to predefined place
        msgDegree.teta0 = 90;
        msgDegree.teta1 = inverse_teta1(7, 6*(count+1));
        msgDegree.teta2 = inverse_teta2(7, msgDegree.teta1 , 6*(count+1));
        msgDegree.teta3 = inverse_teta3(msgDegree.teta1, msgDegree.teta2);

        // Open clamps
        msgDegree.teta4 = 30;  
        count++;
    }

    return 0;
}
